每当用户执行变更文件夹操作时，LeetCode 文件系统都会保存一条日志记录。

下面给出对变更操作的说明：

"../" ：移动到当前文件夹的父文件夹。如果已经在主文件夹下，则 继续停留在当前文件夹 。
"./" ：继续停留在当前文件夹。
"x/" ：移动到名为 x 的子文件夹中。题目数据 保证总是存在文件夹 x 。
给你一个字符串列表 logs ，其中 logs[i] 是用户在 ith 步执行的操作。

文件系统启动时位于主文件夹，然后执行 logs 中的操作。

执行完所有变更文件夹操作后，请你找出 返回主文件夹所需的最小步数 。

示例 1：

输入：logs = ["d1/","d2/","../","d21/","./"]
输出：2
解释：执行 "../" 操作变更文件夹 2 次，即可回到主文件夹

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/crawler-log-folder
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



代码；20210107
class Solution:
    def minOperations(self, logs: List[str]) -> int:
        #本质是数文件操作到了第几层，
        lst = []
        for st in logs:
            if st == './':
                #不操作
                pass
            elif st == '../':
                if lst == []:
                    #栈为空，表明已到栈底，不需要操作
                    pass
                else:
                    #返回上一层目录，
                    lst.pop()
            else:
                #进入下一层目录
                lst.append(st)
        return len(lst)
        小结：本质是数文件操作到了第几层，然后数有效操作次数
