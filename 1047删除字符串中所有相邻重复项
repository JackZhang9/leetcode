给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。

在 S 上反复执行重复项删除操作，直到无法继续删除。

在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。

 

示例：

输入："abbaca"
输出："ca"
解释：
例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



代码；20210107
class Solution:
    def removeDuplicates(self, S: str) -> str:
        #关键在于找出重复项，每次入栈比较栈顶元素
        #放一个空字符，用于第一次入栈时比较
        stack1 = ['']
        for i in S:
            #对第二个入栈元素，开始比较,第一个元素因为必不相等（即i是输入的字符串,i=''为假，执行else），所以直接添加，如果没有''，则无法执行,因为stack[-1]没有这个值，超出范围，
            if i == stack1[-1]:
                #剔除栈顶元素,完成pop()操作
                stack1.pop()
            else:
                stack1.append(i)    
        return ''.join(stack1)
        
        小结：关键在于找出重复项，每次入栈比较栈顶元素
