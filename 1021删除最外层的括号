有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

 

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-outermost-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


代码：20210106
class Solution:
    def removeOuterParentheses(self, S: str) -> str:
        #应该用栈来解决
        lst = []
        res = ''
        #首先遍历
        for i in S:
            #取出一个元素，( 或者 是 ) ，即左括号，或右括号，加了个栈，
            if i =='(':
                #一开始，栈是空的，所以边际左括号不执行，
                if lst:
                    res += i
                lst.append(i)
            if i == ')':
                #出现一个右括号，弹出一个左括号，当栈为空时，不加右括号
                lst.pop()
                if lst:
                    res += i
        return res
        
        
   小结：主要是构造一个辅助栈，随着遍历，弹出左括号，利用栈是否为空，确定边际括号
